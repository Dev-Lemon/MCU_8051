C51 COMPILER V9.01   MAIN                                                                  07/12/2018 20:44:50 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REGX52.H>       
   2          #include"UART.h" // thu vien UART
   3          #include"Car.h" //      thu vien dieu khien xe
   4          unsigned char Data = 0;
   5          unsigned int T, Ton, Toff;
   6          unsigned char Ton_h_reload, Ton_l_reload, Toff_h_reload, Toff_l_reload; 
   7          /*Cac ham bam xung*/
   8          void PWM_Init(unsigned int ck); /*ham khoi tao bam xung voi chu ky ck*/
   9          void PWM_Start();/*ham khoi chay timer0*/
  10          void PWM_Stop();/*ham dung timer0*/
  11          void PWM_Set_Duty(unsigned char duty);/*ham set toc do quay cua dong co la duty(xung bam voi do rong)*/
  12          int main(){
  13   1              UART_Init(); //Khoi tao UART
  14   1              PWM_Init(1085);//khoi tao che do bam xung voi chu ky 1085us(1,085ms)
  15   1              tatloa();                           
  16   1              tatdent();
  17   1              tatdens();
  18   1              while(1){
  19   2                      Data = UART_RxChar();//nhan du lieu tu HC05 va gan vao bien Data
  20   2                      switch (Data){//kiem tra bien Data xem no nhan dc ky tu gi va thuc hien lenh tuong ung
  21   3                              case 'F':
  22   3                                      tien();
  23   3                                      break;
  24   3                              case 'B':
  25   3                                      lui();
  26   3                                      break;
  27   3                              case 'L':
  28   3                                      trai();
  29   3                                      break;
  30   3                              case 'R':
  31   3                                      phai();
  32   3                                      break;
  33   3                              case 'W':
  34   3                                      batdent();
  35   3                                      break;
  36   3                              case 'w':
  37   3                                      tatdent();
  38   3                                      break;
  39   3                              case 'U':
  40   3                                      batdens();
  41   3                                      break;
  42   3                              case 'u':
  43   3                                      tatdens();
  44   3                                      break;
  45   3                              case 'V':
  46   3                                      batloa();
  47   3                                      break;
  48   3                              case 'v':
  49   3                                      tatloa();
  50   3                                      break;
  51   3                              case '0':
  52   3                                      PWM_Set_Duty(0);
  53   3                                      PWM_Start();
  54   3                                      break;
  55   3                              case '1':
C51 COMPILER V9.01   MAIN                                                                  07/12/2018 20:44:50 PAGE 2   

  56   3                                      PWM_Set_Duty(10);
  57   3                                      PWM_Start();
  58   3                                      break;
  59   3                              case '2':
  60   3                                      PWM_Set_Duty(20);
  61   3                                      PWM_Start();
  62   3                                      break;
  63   3                              case '3':
  64   3                                      PWM_Set_Duty(30);
  65   3                                      PWM_Start();
  66   3                                      break;
  67   3                              case '4':
  68   3                                      PWM_Set_Duty(40);
  69   3                                      PWM_Start();
  70   3                                      break;
  71   3                              case '5':
  72   3                                      PWM_Set_Duty(50);
  73   3                                      PWM_Start();
  74   3                                      break;
  75   3                              case '6':
  76   3                                      PWM_Set_Duty(60);
  77   3                                      PWM_Start();
  78   3                                      break;
  79   3                              case '7':
  80   3                                      PWM_Set_Duty(70);
  81   3                                      PWM_Start();
  82   3                                      break;
  83   3                              case '8':
  84   3                                      PWM_Set_Duty(80);
  85   3                                      PWM_Start();
  86   3                                      break;
  87   3                              case '9':
  88   3                                      PWM_Set_Duty(90);
  89   3                                      PWM_Start();
  90   3                                      break;
  91   3                              case 'q':
  92   3                                      PWM_Set_Duty(100);
  93   3                                      PWM_Start();
  94   3                                      break;
  95   3                              case 'D':
  96   3                                      dung();
  97   3                                      PWM_Stop();
  98   3                                      tatdent();
  99   3                                      tatdens();
 100   3                                      break;
 101   3                              case 'S':
 102   3                                      dung();
 103   3                                      break;
 104   3                              case 'X':
 105   3                                      tien();
 106   3                                      break;
 107   3                              case 'x':
 108   3                                      dung();
 109   3                                      break;
 110   3                      }
 111   2              }
 112   1              return 0;
 113   1      }
 114          void PWM_Init(unsigned int ck){ //ham khoi tao timer 0
 115   1              speed1 = speed2 = 0;//cai dat 2 chan toc do ve muc 0    
 116   1              TMOD &= 0xF0;           // Xoa di cac bit chon mode cua Timer0
 117   1              TMOD |= 0x01;           // Timer0 hoat dong o mode 1      
C51 COMPILER V9.01   MAIN                                                                  07/12/2018 20:44:50 PAGE 3   

 118   1              
 119   1              ET0 = 1;                        // Cho phep ngat Timer0
 120   1              EA = 1;                         // Cho phep ngat toan cuc
 121   1              
 122   1              T  = ck;                         //T = chu ky
 123   1              Ton = T/2;                      // Duty Cycle = 50%
 124   1              Toff = T - Ton;    //set ban dau cho xung vuong 50%
 125   1              /*Tinh toan san cac gia tri can nap lai ban dau cho TH) vaf TL0*/
 126   1                      /*2 gia tri nap TH0 TL0  neu chan speed1 va speed2 dang o muc 1*/
 127   1              Ton_h_reload = (65536-Ton)>>8;
 128   1              Ton_l_reload = (65536-Ton)&0x00FF;
 129   1                      /*2 gia tri nap TH0 TL0  neu chan speed1 va speed2 dang o muc 0*/
 130   1              Toff_h_reload = (65536-Toff)>>8;
 131   1              Toff_l_reload = (65536-Toff)&0x00FF;
 132   1              
 133   1              TH0 = Ton_h_reload;     //nap gia tri cho thanh ghi TH0
 134   1              TL0 = Ton_l_reload;     // nap gia tri cho thanh ghi TL0
 135   1      }
 136          void PWM_Start(){
 137   1              TR0 = 1;                        // Timer0 bat dau dem
 138   1      }
 139          
 140          void PWM_Stop(){
 141   1              TR0 = 0;                        // Timer0 ngung dem
 142   1      }
 143          
 144          void PWM_Set_Duty(unsigned char duty){
 145   1              if(duty == 0){
 146   2                      speed1 = speed2 = 0; //cho chan chinh toc do ve muc 0
 147   2                      ET0 = 0;//cam ngat timer
 148   2              }
 149   1              else if(duty == 100){
 150   2                              speed1 = speed2 = 1; //chân chinh toc do cho = 1
 151   2                              ET0 = 0; //cam ngat timer0
 152   2                              }
 153   1                      else{
 154   2                              Ton = ((unsigned long)T)*duty/100;//tinh toan Ton
 155   2                              Toff = T - Ton;//tinh toan  Toff
 156   2                              /*      Tinh toan lai 2 bien nap cho TH0 va TL0 neu chan speed1 dang o muc 1*/
 157   2                              Ton_h_reload = (65536-Ton)>>8;
 158   2                              Ton_l_reload = (65536-Ton)&0x00FF;
 159   2                              /*      Tinh toan lai 2 bien nap cho TH0 va TL0 neu chan speed1 dang o muc 0*/
 160   2                              Toff_h_reload = (65536-Toff)>>8;
 161   2                              Toff_l_reload = (65536-Toff)&0x00FF;
 162   2      
 163   2                              ET0 = 1;
 164   2                      }
 165   1      }
 166          void Timer0Overflow() interrupt 1{
 167   1              speed1 = ~speed1;
 168   1              speed2 = ~speed2;
 169   1              if(speed1==0)  // neu dang la muc 1
 170   1              {
 171   2                      TH0 = Toff_h_reload; //nap 2 gia tri nay
 172   2                      TL0 = Toff_l_reload;
 173   2              }
 174   1              else  //neu dang o muc 0 nap 2 gia tri nay
 175   1              {
 176   2                      TH0 = Ton_h_reload;
 177   2                      TL0 = Ton_l_reload;
 178   2              }
 179   1      }
C51 COMPILER V9.01   MAIN                                                                  07/12/2018 20:44:50 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    508    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
